#include <Arduino.h>
#include <U8g2lib.h>
#include <sstream>
#include <bitset>
#include <cmath>
#include <string>
#include <vector>
#include <STM32FreeRTOS.h>
#include <ES_CAN.h>
#include <iostream>
// #define DISABLE_THREADS
// #define TEST_SCANKEYS
// Constants
const uint32_t interval = 100; // Display update interval

// Pin definitions
// Row select and enable
const int RA0_PIN = D3;
const int RA1_PIN = D6;
const int RA2_PIN = D12;
const int REN_PIN = A5;

// Matrix input and output
const int C0_PIN = A2;
const int C1_PIN = D9;
const int C2_PIN = A6;
const int C3_PIN = D1;
const int OUT_PIN = D11;

// Audio analogue out
const int OUTL_PIN = A4;
const int OUTR_PIN = A3;

// Joystick analogue in
const int JOYY_PIN = A0;
const int JOYX_PIN = A1;

// Output multiplexer bits
const int DEN_BIT = 3;
const int DRST_BIT = 4;
const int HKOW_BIT = 5;
const int HKOE_BIT = 6;

PROGMEM uint8_t piano[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78,
    0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78, 0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78,
    0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78, 0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78,
    0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78, 0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78,
    0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78, 0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78,
    0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78, 0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78,
    0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78, 0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78,
    0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78, 0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78,
    0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78, 0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78,
    0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78, 0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78,
    0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78, 0x1e, 0xf8, 0xc0, 0xf7, 0xc0, 0x03, 0x1e, 0x78,
    0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f, 0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f,
    0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f, 0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f,
    0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f, 0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f,
    0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f, 0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f,
    0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

uint8_t piano_c[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

uint8_t piano_c_sharp[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

uint8_t piano_d[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

uint8_t piano_d_sharp[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

uint8_t piano_e[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x1f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x1f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

uint8_t piano_f[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

uint8_t piano_f_sharp[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

uint8_t piano_g[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xf9, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x7f, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

uint8_t piano_a[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
uint8_t piano_g_sharp[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

uint8_t piano_a_sharp[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

uint8_t piano_b[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
uint8_t KeysSelectionScreen[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xe8, 0xd2, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x4d, 0x52, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x4a, 0xcc, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x48, 0x52, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xe8, 0xd2, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0xf4, 0x22, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0x12, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0x71, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0x12, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0xf4, 0x88, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xf3, 0x8c, 0x39, 0xe7, 0x92, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x14, 0x52, 0x4a, 0x49, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x73, 0x42, 0x3a, 0x49, 0x5a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x12, 0x52, 0x2a, 0x49, 0x52, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xf4, 0x8c, 0x49, 0xe7, 0x92, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00
};


uint8_t MixerSelectedScreen[] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0xe8, 0xd2, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0x4d, 0x52, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0x4a, 0xcc, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0x48, 0x52, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0xe8, 0xd2, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xf4, 0x22, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x12, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x71, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x12, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xf4, 0x88, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xf3, 0x8c, 0x39, 0xe7, 0x92, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x14, 0x52, 0x4a, 0x49, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x73, 0x42, 0x3a, 0x49, 0x5a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x12, 0x52, 0x2a, 0x49, 0x52, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xf4, 0x8c, 0x49, 0xe7, 0x92, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00
};
uint8_t RecordingSelectedScreen[] PROGMEM ={
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xe8, 0xd2, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x4d, 0x52, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x4a, 0xcc, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x48, 0x52, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xe8, 0xd2, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xf4, 0x22, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x12, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x71, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x12, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xf4, 0x88, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0xf3, 0x8c, 0x39, 0xe7, 0x92, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0x14, 0x52, 0x4a, 0x49, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0x73, 0x42, 0x3a, 0x49, 0x5a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0x12, 0x52, 0x2a, 0x49, 0x52, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0xf4, 0x8c, 0x49, 0xe7, 0x92, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00
};

// Display driver object
U8G2_SSD1305_128X32_ADAFRUIT_F_HW_I2C u8g2(U8G2_R0);

// Function to set outputs using key matrix
void setOutMuxBit(const uint8_t bitIdx, const bool value)
{
  digitalWrite(REN_PIN, LOW);
  digitalWrite(RA0_PIN, bitIdx & 0x01);
  digitalWrite(RA1_PIN, bitIdx & 0x02);
  digitalWrite(RA2_PIN, bitIdx & 0x04);
  digitalWrite(OUT_PIN, value);
  digitalWrite(REN_PIN, HIGH);
  delayMicroseconds(2);
  digitalWrite(REN_PIN, LOW);
}

struct
{
  std::bitset<32> inputs;
  SemaphoreHandle_t mutex;
  uint8_t RX_Message[8] = {0};

  int knob3Rotation = 0;
} sysState;
QueueHandle_t msgInQ;
QueueHandle_t msgOutQ;
SemaphoreHandle_t CAN_TX_Semaphore;

void setRow(uint8_t x)
{
  // Convert to 3 bit binary
  std::bitset<3> row(x);
  digitalWrite(REN_PIN, LOW);
  digitalWrite(RA0_PIN, row[0]);
  digitalWrite(RA1_PIN, row[1]);
  digitalWrite(RA2_PIN, row[2]);
  digitalWrite(REN_PIN, HIGH);
}

std::bitset<4> readCols()
{
  std::bitset<4> res;
  res[0] = digitalRead(C0_PIN);
  res[1] = digitalRead(C1_PIN);
  res[2] = digitalRead(C2_PIN);
  res[3] = digitalRead(C3_PIN);
  return res;
}
uint32_t calcStepSize(float n)
{
  return static_cast<uint32_t>(std::pow(2.0, n / 12) * std::pow(2, 32) * 440 / 22000);
}

const uint32_t stepSizes[12] = {
    calcStepSize(-9),
    calcStepSize(-8),
    calcStepSize(-7),
    calcStepSize(-6),
    calcStepSize(-5),
    calcStepSize(-4),
    calcStepSize(-3),
    calcStepSize(-2),
    calcStepSize(-1),
    calcStepSize(0),
    calcStepSize(1),
    calcStepSize(2)};

volatile uint32_t currentStepSize;
volatile uint32_t currentKnob3Rotation;

void sampleISR()

{
  static uint32_t phaseAcc = 0;
  phaseAcc += currentStepSize;
  int32_t Vout = (phaseAcc >> 24) - 128;
  Vout = Vout >> (8 - currentKnob3Rotation);
  analogWrite(OUTR_PIN, Vout + 128);
}
void CAN_RX_ISR(void)
{
  uint8_t RX_Message_ISR[8];
  uint32_t ID;
  CAN_RX(ID, RX_Message_ISR);
  xQueueSendFromISR(msgInQ, RX_Message_ISR, NULL);
}

void CAN_TX_Task(void *pvParameters)
{
  uint8_t msgOut[8];
  while (1)
  {
    xQueueReceive(msgOutQ, msgOut, portMAX_DELAY);
    xSemaphoreTake(CAN_TX_Semaphore, portMAX_DELAY);
    CAN_TX(0x123, msgOut);
  }
}

void CAN_TX_ISR(void)
{
  xSemaphoreGiveFromISR(CAN_TX_Semaphore, NULL);
}
class Knob
{
private:
  uint32_t upperLimit;
  uint32_t lowerLimit;
  uint32_t knobIndex;
  int currentValue = 0;
  std::bitset<2> prevB3A3 = 0b00;
  std::bitset<2> B3A3;
  uint32_t row;
  std::bitset<4> cols;
  bool increment = false;

public:
  Knob(uint32_t _knobIndex, int _upperLimit = INT_MAX, int _lowerLimit = INT_MIN)
      : knobIndex(_knobIndex), upperLimit(_upperLimit), lowerLimit(_lowerLimit)
  {
  }

  void setUpperLimit(int newUpperLimit)
  {
    upperLimit = newUpperLimit;
  }

  void setLowerLimit(int newLowerLimit)
  {
    lowerLimit = newLowerLimit;
  }

  int getCurrentValue()
  {
    return currentValue;
  }

  void updateCurrentValue()
  {
    if (knobIndex == 3 || knobIndex == 2)
      row = 3;
    else
      row = 4;
    setRow(row);
    delayMicroseconds(3);
    cols = readCols();

    if (knobIndex == 3 || knobIndex == 1)
      B3A3 = cols[1] << 1 | cols[0];
    else
      B3A3 = cols[3] << 1 | cols[2];
    if (prevB3A3 == 0b00 && B3A3 == 0b01 || prevB3A3 == 0b11 && B3A3 == 0b10)
    {
      currentValue++;
      increment = true;
    }
    else if (prevB3A3 == 0b01 && B3A3 == 0b00 || prevB3A3 == 0b10 && B3A3 == 0b11)
    {
      currentValue--;
      increment = false;
    }
    else if (prevB3A3 == 0b11 && B3A3 == 0b00)
    {
      currentValue += increment ? 1 : -1;
    }
    if (currentValue > upperLimit)
      currentValue = upperLimit;
    else if (currentValue < lowerLimit)
      currentValue = lowerLimit;
    prevB3A3 = B3A3;
  }
};
void decodeTask(void *pvParameters)
{
  uint8_t localMessage[8] = {0};
  while (1)
  {
    xQueueReceive(msgInQ, localMessage, portMAX_DELAY);
    if (localMessage[0] == 'P')
    {

      __atomic_store_n(&currentStepSize, stepSizes[localMessage[2]] << (localMessage[1] - 4), __ATOMIC_RELAXED);
    }

    xSemaphoreTake(sysState.mutex, portMAX_DELAY);
    memcpy(sysState.RX_Message, localMessage, sizeof(localMessage));
    xSemaphoreGive(sysState.mutex);
  }
}
void scanKeysTask(void *pvParameters)
{
  uint8_t TX_Message[8] = {0};
  const TickType_t xFrequency = 20 / portTICK_PERIOD_MS;
  TickType_t xLastWakeTime = xTaskGetTickCount();
  std::bitset<2> prevB3A3 = 0b00;
  std::bitset<2> B3A3;
  Knob knob3(3, 8, 0);
  bool increment = false;
  std::vector<int> indexes;

  std::bitset<4> cols;
  uint32_t localCurrentStepSize;
#ifdef TEST_SCANKEYS
  for (int i = 0; i <= 11; i++)
  {
    TX_Message[0] = 'P';
    TX_Message[1] = 0;
    TX_Message[2] = 0;
    xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
  }
#else
  while (1)
  {
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
    indexes = {};
    xSemaphoreTake(sysState.mutex, portMAX_DELAY);
    for (int row = 0; row <= 7; row++)
    {

      setRow(row);
      delayMicroseconds(3);
      cols = readCols();
      sysState.inputs[row * 4] = cols[0];
      sysState.inputs[row * 4 + 1] = cols[1];
      sysState.inputs[row * 4 + 2] = cols[2];
      sysState.inputs[row * 4 + 3] = cols[3];
      if (row == 3)
      {
        knob3.updateCurrentValue();
        sysState.knob3Rotation = knob3.getCurrentValue();
        __atomic_store_n(&currentKnob3Rotation, sysState.knob3Rotation, __ATOMIC_RELAXED);
      }
    }

    for (int i = 0; i <= 11; i++)
    {
      if (sysState.inputs[i] == 0)
      {
        indexes.push_back(i);
      };
    }
    xSemaphoreGive(sysState.mutex);
    if (indexes.size() == 0)
    {
      if (sysState.RX_Message[0] != 'P')
      {
        localCurrentStepSize = 0;
        __atomic_store_n(&currentStepSize, localCurrentStepSize, __ATOMIC_RELAXED);
      }
      TX_Message[0] = 'R';
      TX_Message[1] = 0;
      TX_Message[2] = 0;
      xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
    }
    else
    {
      localCurrentStepSize = stepSizes[indexes[0]];
      TX_Message[0] = 'P';
      TX_Message[1] = 4;
      TX_Message[2] = indexes[0];
      xQueueSend(msgOutQ, TX_Message, portMAX_DELAY);
      __atomic_store_n(&currentStepSize, localCurrentStepSize, __ATOMIC_RELAXED);
    }
  }
#endif
}
void DefaultDisplay()
{
  std::vector<String> Keys = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"};
  String Pressed;
  Pressed = "";
  xSemaphoreTake(sysState.mutex, portMAX_DELAY);
  for (int i = 0; i <= 11; i++)
  {
    if (sysState.inputs[i] == 0)
      Pressed += (" " + (Keys[i]));
  }
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  if (Pressed.length() == 0)
    u8g2.drawStr(2, 10, String("No Keys pressed!").c_str());
  else
    u8g2.drawStr(2, 10, String(Pressed + " Pressed !").c_str());
  u8g2.setCursor(2, 20);
  u8g2.print(sysState.knob3Rotation);
  u8g2.setCursor(66, 30);
  u8g2.print((char)sysState.RX_Message[0]);
  u8g2.print(sysState.RX_Message[1]);
  u8g2.print(sysState.RX_Message[2]);
  xSemaphoreGive(sysState.mutex);
  u8g2.sendBuffer();
}

#define FRAME_DELAY (42)
#define FRAME_WIDTH (32)
#define FRAME_HEIGHT (32)
#define KEY_FRAME_COUNT (sizeof(keysFrames) / sizeof(keysFrames[0]))
#define RECORDER_FRAME_COUNT (sizeof(recorderFrames) / sizeof(recorderFrames[0]))
const byte PROGMEM recorderFrames[][128] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 16, 17, 136, 8, 16, 25, 152, 8, 16, 25, 152, 8, 16, 25, 152, 8, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 16, 25, 152, 8, 16, 25, 152, 8, 16, 25, 152, 8, 16, 17, 136, 8, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 17, 128, 8, 16, 25, 128, 8, 16, 25, 136, 8, 16, 25, 152, 8, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 16, 25, 152, 8, 16, 25, 152, 8, 16, 25, 128, 8, 0, 17, 128, 8, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 17, 128, 8, 0, 25, 128, 8, 0, 25, 128, 8, 16, 25, 136, 8, 16, 25, 152, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 16, 25, 152, 8, 16, 25, 136, 8, 0, 25, 128, 8, 0, 25, 128, 8, 0, 1, 128, 8, 0, 1, 128, 0, 0, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 128, 8, 0, 25, 128, 8, 0, 25, 128, 8, 0, 25, 128, 8, 16, 25, 128, 8, 17, 153, 137, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 0, 25, 128, 8, 0, 25, 128, 8, 0, 25, 128, 8, 0, 25, 128, 8, 0, 1, 128, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 8, 0, 25, 128, 8, 0, 25, 128, 8, 0, 25, 128, 8, 0, 25, 128, 136, 17, 153, 137, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 137, 136, 0, 25, 128, 8, 0, 25, 128, 8, 0, 25, 128, 8, 0, 25, 128, 8, 0, 25, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 8, 0, 24, 0, 8, 0, 25, 0, 8, 0, 25, 128, 8, 0, 25, 128, 8, 0, 153, 129, 136, 1, 153, 129, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 1, 153, 129, 136, 1, 153, 129, 136, 0, 25, 128, 8, 0, 25, 128, 8, 0, 25, 0, 8, 0, 24, 0, 8, 0, 16, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 25, 0, 8, 0, 25, 128, 136, 1, 153, 129, 136, 1, 153, 129, 136, 17, 153, 137, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 1, 153, 129, 136, 1, 153, 129, 136, 0, 25, 128, 8, 0, 25, 128, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 16, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 153, 1, 136, 1, 153, 129, 136, 1, 153, 129, 136, 1, 153, 129, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 1, 153, 129, 136, 1, 153, 129, 136, 1, 153, 129, 136, 1, 25, 128, 136, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 16, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 136, 1, 153, 1, 136, 1, 153, 129, 136, 1, 153, 129, 136, 17, 153, 137, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 1, 153, 129, 136, 1, 153, 129, 136, 1, 152, 1, 136, 1, 24, 0, 136, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 8, 0, 16, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 8, 0, 24, 0, 8, 0, 24, 0, 136, 1, 152, 1, 136, 1, 152, 1, 136, 1, 153, 129, 136, 1, 153, 129, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 1, 153, 129, 136, 1, 153, 129, 136, 1, 152, 1, 136, 1, 152, 1, 136, 0, 24, 0, 136, 0, 24, 0, 8, 0, 24, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 24, 0, 136, 1, 152, 1, 136, 1, 152, 1, 136, 1, 152, 1, 136, 1, 153, 1, 136, 17, 153, 137, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 137, 136, 1, 152, 1, 136, 1, 152, 1, 136, 1, 152, 1, 136, 1, 152, 1, 136, 0, 24, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 1, 144, 1, 128, 1, 152, 1, 136, 1, 152, 1, 136, 1, 152, 1, 136, 1, 152, 1, 136, 17, 153, 137, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 1, 152, 1, 136, 1, 152, 1, 136, 1, 152, 1, 136, 1, 152, 1, 136, 1, 144, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 1, 128, 1, 128, 1, 128, 1, 152, 1, 128, 1, 152, 1, 136, 1, 152, 1, 136, 17, 152, 9, 136, 17, 153, 25, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 152, 25, 136, 17, 152, 9, 136, 1, 152, 1, 136, 1, 152, 1, 136, 1, 144, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 152, 1, 128, 1, 152, 1, 136, 17, 152, 9, 136, 17, 152, 25, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 152, 25, 136, 17, 152, 25, 136, 1, 152, 1, 136, 1, 144, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 17, 152, 9, 128, 17, 152, 25, 136, 17, 152, 25, 136, 17, 153, 25, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 152, 25, 136, 17, 152, 25, 136, 17, 152, 25, 136, 1, 144, 9, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 9, 128, 17, 144, 25, 128, 17, 152, 25, 136, 17, 152, 25, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 152, 25, 136, 17, 152, 25, 136, 17, 144, 25, 128, 1, 128, 9, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 17, 128, 25, 128, 17, 128, 25, 128, 17, 152, 25, 136, 17, 152, 25, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 152, 25, 136, 17, 144, 25, 136, 17, 128, 25, 128, 17, 128, 25, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 1, 128, 17, 128, 25, 128, 17, 128, 25, 128, 17, 128, 25, 128, 17, 144, 25, 128, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 144, 25, 128, 17, 128, 25, 128, 17, 128, 25, 128, 17, 128, 25, 128, 1, 128, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 24, 0, 17, 128, 25, 128, 17, 128, 25, 128, 17, 128, 25, 128, 17, 128, 25, 128, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 145, 153, 136, 17, 128, 25, 128, 17, 128, 25, 128, 17, 128, 25, 128, 17, 128, 25, 128, 16, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 8, 0, 16, 0, 24, 0, 16, 0, 24, 0, 17, 128, 25, 128, 17, 128, 25, 128, 17, 129, 153, 128, 17, 145, 153, 128, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 129, 153, 128, 17, 128, 153, 128, 17, 128, 25, 128, 17, 128, 25, 128, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 8, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 128, 17, 128, 25, 128, 17, 129, 153, 128, 17, 129, 153, 128, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 145, 153, 136, 17, 129, 153, 128, 17, 129, 153, 128, 17, 128, 25, 128, 17, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 8, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 129, 25, 128, 17, 129, 153, 128, 17, 129, 153, 128, 17, 145, 153, 128, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 129, 153, 128, 17, 129, 153, 128, 17, 129, 153, 128, 17, 0, 152, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 8, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 1, 24, 0, 16, 1, 152, 0, 17, 129, 153, 128, 17, 129, 153, 128, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 145, 153, 136, 17, 129, 153, 128, 17, 129, 153, 128, 16, 1, 152, 0, 16, 0, 152, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 8, 0, 16, 0, 24, 0, 16, 1, 24, 0, 16, 1, 152, 0, 16, 1, 152, 0, 16, 129, 153, 128, 17, 129, 153, 128, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 129, 153, 128, 17, 129, 153, 0, 16, 1, 152, 0, 16, 1, 152, 0, 16, 0, 24, 0, 16, 0, 24, 0, 16, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 24, 0, 16, 1, 152, 0, 16, 1, 152, 0, 16, 1, 152, 0, 16, 1, 152, 0, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 145, 153, 136, 16, 1, 152, 0, 16, 1, 152, 0, 16, 1, 152, 0, 16, 1, 152, 0, 16, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 128, 0, 16, 1, 152, 0, 16, 1, 152, 0, 16, 1, 152, 0, 16, 1, 152, 8, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 145, 153, 136, 16, 1, 152, 8, 16, 1, 152, 0, 16, 1, 152, 0, 16, 1, 152, 0, 16, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 0, 0, 1, 128, 0, 16, 1, 128, 0, 16, 1, 152, 0, 16, 1, 152, 0, 16, 17, 152, 8, 16, 25, 152, 8, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 16, 25, 152, 8, 16, 17, 152, 8, 16, 1, 152, 0, 16, 1, 152, 0, 16, 1, 136, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 16, 1, 136, 0, 16, 1, 152, 8, 16, 25, 152, 8, 16, 25, 152, 8, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 17, 153, 153, 136, 16, 25, 152, 8, 16, 17, 152, 8, 16, 1, 152, 8, 16, 1, 136, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

const byte PROGMEM keysFrames[][128] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 123, 0, 0, 0, 225, 3, 0, 0, 1, 2, 0, 0, 15, 2, 0, 0, 63, 2, 0, 0, 243, 3, 0, 0, 129, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 128, 1, 0, 0, 252, 1, 0, 0, 31, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 129, 1, 0, 0, 199, 1, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 123, 0, 0, 0, 225, 3, 0, 0, 1, 2, 0, 0, 15, 2, 0, 0, 63, 2, 0, 0, 243, 3, 0, 0, 129, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 128, 1, 0, 0, 252, 1, 0, 0, 31, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 129, 1, 0, 0, 199, 1, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 123, 0, 0, 0, 225, 3, 0, 0, 1, 2, 0, 0, 15, 2, 0, 0, 63, 2, 0, 0, 243, 3, 0, 0, 129, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 128, 1, 0, 0, 252, 1, 0, 0, 31, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 129, 1, 0, 0, 199, 1, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 123, 0, 0, 0, 225, 3, 0, 0, 1, 2, 0, 0, 15, 2, 0, 0, 63, 2, 0, 0, 243, 3, 0, 0, 129, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 128, 1, 0, 0, 252, 1, 0, 0, 31, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 129, 1, 0, 0, 199, 1, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 249, 0, 0, 0, 225, 3, 0, 0, 1, 2, 0, 0, 31, 2, 0, 0, 63, 2, 0, 0, 225, 3, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 128, 1, 0, 0, 128, 1, 0, 0, 254, 1, 0, 0, 7, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 129, 1, 0, 0, 207, 1, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 63, 0, 0, 0, 241, 3, 0, 0, 193, 3, 0, 0, 1, 2, 0, 0, 31, 2, 0, 0, 123, 3, 0, 0, 225, 3, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 128, 1, 0, 0, 224, 1, 0, 0, 255, 1, 0, 0, 3, 1, 0, 128, 1, 1, 0, 128, 129, 1, 0, 0, 131, 1, 0, 0, 255, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 15, 0, 0, 128, 252, 0, 0, 128, 240, 1, 0, 128, 0, 1, 0, 128, 7, 1, 0, 128, 63, 1, 0, 128, 249, 1, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 1, 0, 0, 128, 1, 0, 0, 128, 1, 0, 0, 128, 1, 0, 0, 128, 1, 0, 0, 128, 1, 0, 0, 192, 1, 0, 0, 252, 1, 0, 0, 159, 1, 0, 128, 129, 1, 0, 128, 129, 1, 0, 128, 129, 1, 0, 0, 195, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 3, 0, 0, 224, 127, 0, 0, 32, 124, 0, 0, 96, 192, 0, 0, 96, 192, 0, 0, 224, 207, 0, 0, 96, 252, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 192, 0, 0, 0, 192, 0, 0, 0, 192, 0, 0, 0, 192, 0, 0, 0, 192, 0, 0, 0, 224, 0, 0, 0, 254, 0, 0, 128, 135, 0, 0, 128, 129, 0, 0, 128, 128, 0, 0, 128, 192, 0, 0, 128, 227, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 1, 0, 0, 216, 63, 0, 0, 24, 48, 0, 0, 16, 32, 0, 0, 208, 33, 0, 0, 240, 63, 0, 0, 48, 28, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 112, 0, 0, 0, 222, 0, 0, 128, 195, 0, 0, 192, 192, 0, 0, 192, 192, 0, 0, 128, 192, 0, 0, 128, 115, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 8, 0, 0, 252, 31, 0, 0, 8, 16, 0, 0, 8, 16, 0, 0, 248, 48, 0, 0, 248, 63, 0, 0, 24, 6, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 112, 0, 0, 0, 94, 0, 0, 128, 195, 0, 0, 192, 192, 0, 0, 192, 192, 0, 0, 192, 192, 0, 0, 128, 113, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 248, 31, 0, 0, 8, 18, 0, 0, 8, 48, 0, 0, 24, 48, 0, 0, 248, 63, 0, 0, 16, 31, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 112, 0, 0, 0, 124, 0, 0, 128, 199, 0, 0, 192, 192, 0, 0, 192, 192, 0, 0, 192, 192, 0, 0, 128, 97, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 3, 0, 0, 16, 63, 0, 0, 16, 32, 0, 0, 48, 96, 0, 0, 240, 99, 0, 0, 240, 127, 0, 0, 32, 28, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 64, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 120, 0, 0, 0, 207, 0, 0, 192, 193, 0, 0, 192, 192, 0, 0, 192, 192, 0, 0, 128, 224, 0, 0, 128, 127, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 3, 0, 0, 224, 15, 0, 0, 96, 252, 0, 0, 64, 192, 0, 0, 64, 128, 0, 0, 192, 143, 0, 0, 192, 252, 0, 0, 64, 112, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 64, 0, 0, 0, 192, 0, 0, 0, 192, 0, 0, 0, 192, 0, 0, 0, 192, 0, 0, 0, 192, 0, 0, 0, 224, 0, 0, 0, 255, 0, 0, 128, 193, 0, 0, 192, 192, 0, 0, 192, 192, 0, 0, 128, 192, 0, 0, 128, 127, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 15, 0, 0, 128, 61, 0, 0, 128, 241, 1, 0, 128, 1, 3, 0, 128, 7, 3, 0, 128, 31, 3, 0, 128, 249, 3, 0, 128, 225, 1, 0, 128, 1, 0, 0, 128, 1, 0, 0, 128, 1, 0, 0, 128, 1, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 192, 0, 0, 0, 255, 0, 0, 128, 131, 0, 0, 192, 128, 0, 0, 192, 128, 0, 0, 128, 192, 0, 0, 128, 231, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 62, 0, 0, 0, 246, 0, 0, 0, 198, 7, 0, 0, 2, 7, 0, 0, 30, 4, 0, 0, 126, 4, 0, 0, 227, 7, 0, 0, 131, 7, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 128, 1, 0, 0, 128, 1, 0, 0, 255, 1, 0, 128, 191, 1, 0, 128, 129, 1, 0, 128, 128, 1, 0, 128, 193, 0, 0, 128, 199, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 248, 0, 0, 0, 200, 3, 0, 0, 12, 15, 0, 0, 28, 28, 0, 0, 124, 24, 0, 0, 236, 24, 0, 0, 132, 11, 0, 0, 6, 15, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 255, 3, 0, 128, 121, 1, 0, 128, 129, 1, 0, 128, 129, 1, 0, 128, 129, 1, 0, 0, 199, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 240, 1, 0, 0, 176, 3, 0, 0, 16, 7, 0, 0, 24, 62, 0, 0, 120, 48, 0, 0, 248, 48, 0, 0, 136, 51, 0, 0, 12, 31, 0, 0, 12, 28, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 255, 3, 0, 0, 243, 3, 0, 128, 1, 3, 0, 128, 129, 1, 0, 0, 129, 1, 0, 0, 207, 1, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 1, 0, 0, 176, 3, 0, 0, 48, 6, 0, 0, 48, 60, 0, 0, 120, 56, 0, 0, 248, 49, 0, 0, 152, 51, 0, 0, 8, 63, 0, 0, 12, 28, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 255, 3, 0, 0, 227, 3, 0, 128, 1, 3, 0, 0, 1, 3, 0, 0, 131, 1, 0, 0, 206, 1, 0, 0, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 240, 1, 0, 0, 176, 3, 0, 0, 48, 14, 0, 0, 16, 60, 0, 0, 248, 48, 0, 0, 216, 49, 0, 0, 24, 51, 0, 0, 8, 62, 0, 0, 12, 28, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 255, 3, 0, 0, 67, 3, 0, 0, 1, 3, 0, 0, 1, 3, 0, 0, 131, 1, 0, 0, 222, 1, 0, 0, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 240, 1, 0, 0, 16, 7, 0, 0, 24, 30, 0, 0, 56, 56, 0, 0, 248, 48, 0, 0, 216, 49, 0, 0, 12, 23, 0, 0, 12, 30, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 24, 3, 0, 0, 255, 3, 0, 0, 3, 3, 0, 0, 1, 3, 0, 0, 1, 3, 0, 0, 131, 1, 0, 0, 254, 1, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 248, 0, 0, 0, 216, 1, 0, 0, 24, 15, 0, 0, 8, 30, 0, 0, 124, 16, 0, 0, 236, 24, 0, 0, 140, 27, 0, 0, 12, 31, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 60, 3, 0, 0, 255, 3, 0, 0, 3, 3, 0, 0, 1, 3, 0, 0, 1, 1, 0, 0, 135, 1, 0, 0, 254, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 252, 0, 0, 0, 204, 3, 0, 0, 12, 15, 0, 0, 12, 8, 0, 0, 124, 8, 0, 0, 236, 8, 0, 0, 132, 15, 0, 0, 6, 15, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 136, 3, 0, 0, 255, 3, 0, 0, 3, 3, 0, 0, 1, 3, 0, 0, 1, 1, 0, 0, 131, 1, 0, 0, 254, 1, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 126, 0, 0, 0, 198, 7, 0, 0, 134, 15, 0, 0, 14, 12, 0, 0, 126, 12, 0, 0, 230, 12, 0, 0, 198, 15, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 128, 3, 0, 0, 254, 3, 0, 0, 3, 3, 0, 0, 1, 3, 0, 0, 1, 1, 0, 0, 131, 1, 0, 0, 255, 1, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 122, 0, 0, 0, 226, 7, 0, 0, 2, 7, 0, 0, 14, 6, 0, 0, 63, 6, 0, 0, 227, 7, 0, 0, 195, 7, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 128, 3, 0, 0, 254, 3, 0, 0, 3, 3, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 131, 1, 0, 0, 207, 1, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 123, 0, 0, 0, 227, 3, 0, 0, 3, 6, 0, 0, 15, 6, 0, 0, 63, 6, 0, 0, 243, 7, 0, 0, 131, 3, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 128, 1, 0, 0, 252, 1, 0, 0, 15, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 129, 1, 0, 0, 199, 1, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 123, 0, 0, 0, 225, 3, 0, 0, 1, 2, 0, 0, 15, 2, 0, 0, 63, 2, 0, 0, 243, 3, 0, 0, 129, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 128, 1, 0, 0, 252, 1, 0, 0, 31, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 129, 1, 0, 0, 199, 1, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 123, 0, 0, 0, 225, 3, 0, 0, 1, 2, 0, 0, 15, 2, 0, 0, 63, 2, 0, 0, 243, 3, 0, 0, 129, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 128, 1, 0, 0, 252, 1, 0, 0, 31, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 129, 1, 0, 0, 199, 1, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 123, 0, 0, 0, 225, 3, 0, 0, 1, 2, 0, 0, 15, 2, 0, 0, 63, 2, 0, 0, 243, 3, 0, 0, 129, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 128, 1, 0, 0, 252, 1, 0, 0, 31, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 129, 1, 0, 0, 199, 1, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
#define MIXER_FRAME_COUNT (sizeof(mixerFrames) / sizeof(mixerFrames[0]))
byte PROGMEM mixerFrames[][128] = {
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 63, 134, 129, 129, 63, 252, 129, 129, 96, 124, 128, 129, 96, 32, 128, 129, 127, 48, 128, 1, 31, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 63, 134, 129, 129, 63, 252, 129, 129, 96, 124, 128, 129, 96, 32, 128, 129, 127, 48, 128, 1, 31, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 63, 134, 129, 129, 63, 252, 129, 129, 96, 124, 128, 129, 96, 32, 128, 129, 127, 48, 128, 1, 31, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 63, 134, 129, 129, 63, 252, 129, 129, 96, 124, 128, 129, 96, 32, 128, 129, 127, 48, 128, 1, 31, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 252, 128, 1, 12, 134, 129, 1, 12, 6, 129, 1, 63, 134, 129, 129, 97, 252, 129, 129, 96, 0, 128, 129, 97, 48, 128, 1, 63, 48, 128, 1, 0, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 224, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 30, 134, 129, 129, 63, 252, 129, 129, 97, 124, 128, 129, 96, 32, 128, 129, 127, 48, 128, 1, 31, 48, 192, 7, 4, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 240, 15, 12, 48, 224, 3, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 12, 6, 225, 135, 63, 252, 241, 143, 97, 252, 48, 140, 96, 0, 48, 140, 127, 48, 224, 15, 63, 48, 192, 3, 0, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 252, 240, 15, 12, 254, 225, 7, 12, 6, 1, 0, 62, 134, 129, 129, 63, 252, 129, 129, 97, 0, 128, 129, 96, 48, 128, 129, 127, 48, 128, 1, 31, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 192, 7, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 240, 15, 12, 48, 224, 3, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 12, 6, 129, 1, 63, 252, 129, 129, 97, 252, 128, 129, 96, 32, 128, 129, 97, 48, 128, 1, 63, 48, 128, 1, 0, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 224, 7, 12, 48, 240, 15, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 15, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 254, 129, 1, 12, 134, 129, 1, 12, 6, 129, 1, 63, 254, 129, 129, 63, 252, 128, 129, 96, 0, 128, 129, 96, 48, 128, 129, 127, 48, 128, 1, 0, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 224, 7, 12, 48, 240, 15, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 15, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 12, 134, 129, 129, 63, 252, 129, 129, 97, 120, 128, 129, 96, 48, 128, 129, 97, 48, 128, 1, 63, 48, 128, 1, 0, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 192, 3, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 240, 15, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 252, 128, 1, 12, 134, 129, 1, 12, 6, 129, 1, 62, 134, 129, 129, 63, 252, 128, 129, 97, 0, 128, 129, 96, 48, 128, 129, 127, 48, 128, 1, 31, 48, 128, 1, 4, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 240, 15, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 252, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 12, 134, 129, 129, 63, 252, 129, 129, 97, 0, 128, 129, 96, 48, 128, 129, 97, 48, 128, 1, 63, 48, 128, 1, 0, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 192, 7, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 240, 15, 12, 48, 224, 3, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 12, 134, 129, 1, 62, 252, 129, 129, 63, 120, 128, 129, 97, 48, 128, 129, 96, 48, 128, 129, 127, 48, 128, 1, 31, 48, 128, 1, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 192, 3, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 240, 15, 12, 48, 224, 3, 12, 48, 128, 1, 12, 254, 128, 1, 12, 134, 129, 1, 12, 6, 129, 1, 12, 254, 129, 1, 63, 252, 128, 129, 63, 0, 128, 129, 96, 48, 128, 129, 96, 48, 128, 129, 127, 48, 128, 1, 0, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 224, 7, 12, 252, 48, 12, 12, 134, 49, 12, 12, 6, 49, 12, 12, 134, 225, 7, 12, 252, 0, 128, 63, 0, 128, 129, 97, 48, 128, 129, 96, 48, 128, 129, 127, 48, 128, 1, 63, 48, 128, 1, 0, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 252, 128, 1, 12, 134, 129, 1, 12, 6, 129, 1, 12, 134, 129, 1, 12, 252, 192, 135, 63, 0, 240, 143, 97, 48, 48, 140, 96, 48, 48, 140, 97, 48, 224, 15, 63, 48, 224, 3, 0, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 12, 134, 129, 1, 12, 252, 129, 1, 63, 120, 128, 129, 97, 48, 128, 129, 96, 48, 128, 129, 97, 48, 128, 1, 63, 48, 128, 1, 0, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 240, 15, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 12, 134, 129, 1, 62, 252, 129, 129, 63, 124, 128, 129, 97, 32, 128, 129, 96, 48, 128, 129, 127, 48, 128, 1, 31, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 252, 128, 1, 12, 134, 129, 1, 63, 6, 129, 129, 63, 134, 129, 129, 96, 252, 128, 129, 96, 0, 128, 129, 127, 48, 128, 1, 0, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 192, 3, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 240, 15, 12, 48, 224, 3, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 252, 128, 129, 63, 134, 129, 129, 97, 6, 129, 129, 96, 134, 129, 129, 127, 252, 129, 1, 63, 0, 128, 1, 0, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 240, 15, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 63, 248, 128, 129, 63, 254, 129, 129, 96, 6, 129, 129, 96, 134, 129, 129, 127, 252, 129, 1, 0, 124, 128, 1, 12, 32, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 224, 7, 12, 48, 240, 15, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 15, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 63, 252, 128, 129, 97, 254, 129, 129, 96, 6, 129, 129, 97, 134, 129, 1, 63, 252, 129, 1, 0, 0, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 224, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 254, 129, 129, 63, 134, 129, 129, 97, 6, 129, 129, 96, 254, 129, 129, 127, 252, 128, 1, 63, 0, 128, 1, 0, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 192, 7, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 240, 15, 12, 48, 224, 3, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 252, 128, 1, 12, 254, 129, 1, 30, 6, 129, 129, 63, 134, 129, 129, 97, 252, 129, 129, 96, 0, 128, 129, 127, 48, 128, 1, 31, 48, 128, 1, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 224, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 15, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 63, 134, 129, 129, 63, 252, 129, 129, 96, 124, 128, 129, 96, 32, 128, 129, 127, 48, 128, 1, 31, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 63, 134, 129, 129, 63, 252, 129, 129, 96, 124, 128, 129, 96, 32, 128, 129, 127, 48, 128, 1, 31, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0},
    {0, 0, 0, 0, 32, 0, 0, 4, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 248, 128, 1, 12, 254, 129, 1, 12, 6, 129, 1, 63, 134, 129, 129, 63, 252, 129, 129, 96, 124, 128, 129, 96, 32, 128, 129, 127, 48, 128, 1, 31, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 240, 7, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 48, 12, 12, 48, 224, 7, 12, 48, 0, 0, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 48, 128, 1, 12, 32, 0, 0, 4, 0, 0, 0, 0}};
uint8_t bitswap(uint8_t b)
{
  b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
  b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
  b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
  return b;
}
void bitswap_2d_array(uint8_t arr[28][128])
{
  for (int i = 0; i < 28; i++)
  {
    for (int j = 0; j < 128; j++)
    {
      arr[i][j] = bitswap(arr[i][j]);
    }
  }
}

void KeysDisplay()
{
  u8g2.clearBuffer();
  // u8g2.setFont(u8g2_font_ncenB08_tr);

  // Assuming piano_c, piano_c_sharp, etc., are defined elsewhere
  // Define the keys vector
  std::vector<std::string> Keys = {"piano_c", "piano_c_sharp", "piano_d", "piano_d_sharp", "piano_e", "piano_f", "piano_f_sharp", "piano_g", "piano_g_sharp", "piano_a", "piano_a_sharp", "piano_b"};

  using KeyBitmapType = uint8_t[256];
  uint8_t *Key_bmaps[] = {
      piano_c,
      piano_c_sharp,
      piano_d,
      piano_d_sharp,
      piano_e,
      piano_f,
      piano_f_sharp,
      piano_g,
      piano_g_sharp,
      piano_a,
      piano_a_sharp,
      piano_b};

  xSemaphoreTake(sysState.mutex, portMAX_DELAY);
  uint8_t result[256];
  memcpy(result, piano, sizeof(piano));
  for (int i = 0; i < 12; i++)
  {
    if (sysState.inputs[i] == 0)
    {
      if (Keys[i].substr(Keys[i].length() - 5) == "sharp")
      {
        for (size_t j = 0; j < sizeof(piano) / sizeof(piano[0]); ++j)
        {
          result[j] |= Key_bmaps[i][j];
        }
      }
      else
      {
        for (size_t j = 0; j < sizeof(piano) / sizeof(piano[0]); ++j)
        {
          result[j] &= Key_bmaps[i][j];
        }
      }
    }
  }
  xSemaphoreGive(sysState.mutex);

  u8g2.drawXBMP(32, 0, 64, 32, result);
  u8g2.sendBuffer();
}

enum SelectionState
{
  KeysSelected,
  MixerSelected,
  RecorderSelected,
};
SelectionState SelectionDisplay()
{

  SelectionState currentSelectionState = KeysSelected;
  int i = 0;
  int keyFrame = 0;
  int recorderFrame = 0;
  int mixerFrame = 0;

  while (1)
  {
    xSemaphoreTake(sysState.mutex, portMAX_DELAY);
    if (sysState.inputs[24] == 0)
    {
      xSemaphoreGive(sysState.mutex);
      return currentSelectionState;
    }

    xSemaphoreGive(sysState.mutex);
    if (currentSelectionState == KeysSelected)
    {
      u8g2.clearBuffer();
      u8g2.drawXBMP(0, 0, 128, 32, KeysSelectionScreen);
      u8g2.drawXBMP(96, 0, FRAME_WIDTH, FRAME_WIDTH, keysFrames[keyFrame]);
      u8g2.sendBuffer();

      if (analogRead(JOYY_PIN) > 850)
      {
        currentSelectionState = RecorderSelected;
        delay(100);
        continue;
      }
      if (analogRead(JOYY_PIN) < 150)
      {
        currentSelectionState = MixerSelected;
        delay(100);
        continue;
      }
      keyFrame = (keyFrame + 1) % KEY_FRAME_COUNT;
    }

    else if (currentSelectionState == MixerSelected)
    {

      u8g2.clearBuffer();
      u8g2.drawXBMP(0, 0, 128, 32, MixerSelectedScreen);
      u8g2.drawXBMP(96, 0, FRAME_WIDTH, FRAME_WIDTH, mixerFrames[mixerFrame]);
      // u8g2.drawBitmap(96, 0, FRAME_WIDTH, FRAME_WIDTH, graphFrames[graphFrame]);

      u8g2.sendBuffer();

      if (analogRead(JOYY_PIN) > 850)
      {
        currentSelectionState = KeysSelected;
        delay(100);

        continue;
      }
      if (analogRead(JOYY_PIN) < 150)
      {
        currentSelectionState = RecorderSelected;
        delay(100);
        continue;
      }
      mixerFrame = (mixerFrame + 1) % MIXER_FRAME_COUNT;
    }
    else if (currentSelectionState == RecorderSelected)
    {

      u8g2.clearBuffer();
      u8g2.drawXBMP(0, 0, 128, 32, RecordingSelectedScreen);
      u8g2.drawXBMP(96, 0, FRAME_WIDTH, FRAME_WIDTH, recorderFrames[recorderFrame]);
      u8g2.sendBuffer();
      if (analogRead(JOYY_PIN) > 850)
      {
        currentSelectionState = MixerSelected;
        delay(100);
        continue;
      }
      if (analogRead(JOYY_PIN) < 150)
      {
        currentSelectionState = KeysSelected;
        delay(100);
        continue;
      }
      recorderFrame = (recorderFrame + 1) % RECORDER_FRAME_COUNT;
    }
  }
}

void displayUpdateTask(void *pvParameters)
{
  enum ScreenState
  {
    KeysMenu,
    MixerMenu,
    RecorderMenu,
    SelectionMenu,
  };
  ScreenState currentScreenState;
  currentScreenState = KeysMenu;
  const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
  TickType_t xLastWakeTime = xTaskGetTickCount();
  SelectionState choice;
  while (1)
  {
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
    xSemaphoreTake(sysState.mutex, portMAX_DELAY);
    // Serial.println(String(sysState.inputs[22]));
    Serial.println(sysState.inputs[22]);
    if (sysState.inputs[22] == 0)
    {
      currentScreenState = SelectionMenu;
    }

    xSemaphoreGive(sysState.mutex);

    if (currentScreenState == KeysMenu)
      KeysDisplay();
    else if (currentScreenState == MixerMenu)
      DefaultDisplay();
    else if (currentScreenState == SelectionMenu)
    {
      choice = SelectionDisplay();
      if (choice == MixerSelected)
        currentScreenState = MixerMenu;
      else if (choice == KeysSelected)
        currentScreenState = KeysMenu;
      else
        currentScreenState = RecorderMenu;
    }

    // Toggle LED
    digitalToggle(LED_BUILTIN);
  }
}

void setup()
{
  // put your setup code here, to run once:
  // Set pin directions
  pinMode(RA0_PIN, OUTPUT);
  pinMode(RA1_PIN, OUTPUT);
  pinMode(RA2_PIN, OUTPUT);
  pinMode(REN_PIN, OUTPUT);
  pinMode(OUT_PIN, OUTPUT);
  pinMode(OUTL_PIN, OUTPUT);
  pinMode(OUTR_PIN, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);

  pinMode(C0_PIN, INPUT);
  pinMode(C1_PIN, INPUT);
  pinMode(C2_PIN, INPUT);
  pinMode(C3_PIN, INPUT);
  pinMode(JOYX_PIN, INPUT);
  pinMode(JOYY_PIN, INPUT);

  // Initialise display
  setOutMuxBit(DRST_BIT, LOW); // Assert display logic reset
  delayMicroseconds(2);
  setOutMuxBit(DRST_BIT, HIGH); // Release display logic reset
  u8g2.begin();
  setOutMuxBit(DEN_BIT, HIGH); // Enable display power supply

  // Initialise UART
  Serial.begin(9600);
  Serial.println("Hello World");

  // CAN Bus setup with queues
  msgOutQ = xQueueCreate(384, 8);
  msgInQ = xQueueCreate(36, 8);
  CAN_TX_Semaphore = xSemaphoreCreateCounting(3, 3);
  CAN_Init(true);
  CAN_RegisterRX_ISR(CAN_RX_ISR);
  CAN_RegisterTX_ISR(CAN_TX_ISR);
  setCANFilter(0x123, 0x7ff);
  CAN_Start();

// Interrupt timer setup
#ifndef DISABLE_THREADS
  TIM_TypeDef *Instance = TIM1;
  HardwareTimer *sampleTimer = new HardwareTimer(Instance);
  sampleTimer->setOverflow(22000, HERTZ_FORMAT);
  sampleTimer->attachInterrupt(sampleISR);
  sampleTimer->resume();
#endif

  sysState.mutex = xSemaphoreCreateMutex();
// Threading setup
#ifndef DISABLE_THREADS
  TaskHandle_t scanKeysHandle = NULL;
  xTaskCreate(
      scanKeysTask,
      "scankeys",
      64,
      NULL,
      3,
      &scanKeysHandle);
  xTaskCreate(
      displayUpdateTask,
      "display",
      256,
      NULL,
      2,
      &scanKeysHandle);
  xTaskCreate(
      decodeTask,
      "decode",
      256,
      NULL,
      1,
      &scanKeysHandle);
  xTaskCreate(
      CAN_TX_Task,
      "Tx Queue",
      256,
      NULL,
      4,
      &scanKeysHandle);

  // Start the threading

  vTaskStartScheduler();
#endif

#ifdef TEST_SCANKEYS
  uint32_t startTime = micros();
  for (int iter = 0; iter < 32; iter++)
  {
    scanKeysTask(NULL);
  }
  Serial.println(micros() - startTime);
  while (1)
    ;
#endif
}

// dimension of the screen are 128x32

void loop()
{
}
